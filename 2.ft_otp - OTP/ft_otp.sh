#!/bin/bash

DEBUG=${DEBUG:-0} 
RED='\033[0;31m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
NC='\033[0m'
encrypt_key='42'

debug_print() {
    if [ "$DEBUG" -eq 1 ]; then
        printf "${BLUE}DEBUG: %s${NC}\n" "$1"
    fi
}

check_extension() {
    local filename="$1"
    local extension="$2"
    
    if [[ "$filename" == *.$extension ]]; then
        return 0
    else
        return 1
    fi
}

is_hex() {
    if ! [[ "$1" == *."hex" ]]; then
        return 1;
    fi
    value=$(cat "$1" | tr -d '\n')
    if [ ${#value} -lt 64 ] || ! [[ $value =~ ^[0-9a-fA-F]+$ ]]; then
        return 1
    fi
    return 0
}

is_crypted() {
    output=$(openssl enc -aes-256-cbc -pbkdf2 -d -in ft_otp.key -pass pass:wrongpassword 2>&1)
    if echo "$output" | grep -q "bad decrypt"; then
        return 0
    elif echo "$output" | grep -q "error reading input file"; then
        printf "${RED}The file $2 is not encrypted with AES-256-CBC.${NC}\n"
        return 1
    else
        printf "${RED}The file $2 is likely not encrypted.${NC}\n"
        return 1
    fi
}

generate_key() {
    if [ -z "$1" ]; then
        printf "${RED}Please provide a hexadecimal key of at least 64 characters${NC}\n"
        exit 1
    fi

    key_content="$1"
    if is_hex "$key_content"; then
        echo -n "$key_content" | openssl enc -aes-256-cbc -pbkdf2 -salt -out ft_otp.key -pass pass:${encrypt_key}
        printf "${GREEN}Key stored securely in ft_otp.key${NC}\n"
    else
        printf "${RED}Key is not in hex format or is too short${NC}\n"
        exit 1
    fi
}

generate_random_key() {
    if [ -z "$1" ]; then
        printf "${RED}Please provide the name of the key${NC}\n"
        exit 1
    fi

    openssl rand -hex 32 | tr -d '\n' > "$1.hex"
    printf "${GREEN}Key generated and saved in $1.hex${NC}\n"
}

generate_otp() {
    if [ "$1" != "ft_otp.key" ]; then
        printf "${RED}Please generate the key with -g or provide the key name ft_otp.key${NC}\n"
        exit 1
    fi

    if [ ! -f "$1" ]; then
        printf "${RED}Encrypted key file ft_otp.key not found${NC}\n"
        exit 1
    fi

    if ! is_crypted; then
        printf "${RED}The file $1 is not generated by this script${NC}\n"
        exit 1
    fi

    key_file=$(openssl enc -aes-256-cbc -pbkdf2 -d -in "$1" -pass pass:${encrypt_key} | tr -d '\n')
    key=$(cat $key_file | tr -d '\n')
    debug_print "Key used: $key"
    debug_print "Key length: ${#key}"
    
    if [ -z "$key" ]; then
        printf "${RED}Failed to decrypt the key${NC}\n"
        exit 1
    fi
    if is_hex "$key"; then
        printf "${RED}Decrypted key is not in hex format${NC}\n"
        exit 1
    fi

    # # HOTP algorithm (RFC 4226) : https://tools.ietf.org/html/rfc4226 (page 6) | ./ft_otp.sh -g test.hex && DEBUG=1 ./ft_otp.sh -k ft_otp.key && oathtool --totp --verbose $(cat test.hex) 
    # count_file="hotp_counter"
    # if [ ! -f "$count_file" ]; then
    #     echo 0 > "$count_file"
    # fi

    # count=$(cat "$count_file")
    # ((count++))
    # echo $count > "$count_file"

    debug_print "Counter value for HOTP algo: $count"
    time_step=30
    count+=$(( $(date +%s) / $time_step ))
    debug_print "Current Unix time: $count"
    debug_print "Step size: $time_step"
    debug_print "T value: $count"
    debug_print "Counter value after adding minutes TOTP logic: $count"
    
    hex_count=$(printf "%016x" $count)
    debug_print "Format counter value in hex for HMAC-SHA1: $hex_count"
    
    hmac=$(printf "%016x" $count | xxd -r -p | openssl dgst -sha1 -mac HMAC -macopt hexkey:$key | sed 's/^.* //')
    debug_print "HMAC-SHA1 (key + counter): $hmac"

    offset=$((0x${hmac: -1} & 0xf))
    debug_print "Keep the last 4 bits of the HMAC-SHA1 -> Offset: $offset"

    debug_print "Dynamic truncation at offset $offset:"
    debug_print "  First byte:  0x${hmac:$((offset*2)):2} & 0x7f"
    debug_print "  Second byte: 0x${hmac:$((offset*2+2)):2} & 0xff"
    debug_print "  Third byte:  0x${hmac:$((offset*2+4)):2} & 0xff"
    debug_print "  Fourth byte: 0x${hmac:$((offset*2+6)):2} & 0xff"

    bin_code=$(( ((0x${hmac:$((offset*2)):2} & 0x7f) << 24 ) | \
                ((0x${hmac:$((offset*2+2)):2} & 0xff) << 16 ) | \
                ((0x${hmac:$((offset*2+4)):2} & 0xff) << 8 ) | \
                (0x${hmac:$((offset*2+6)):2} & 0xff) ))
    debug_print "Binary code: $bin_code"

    bin_code=$((bin_code & 0x7fffffff))
    debug_print "31-bit string: $bin_code"

    hotp=$((bin_code % 1000000))
    debug_print "HOTP value: $hotp"

    printf "${GREEN}%06d\n" $hotp
}

if [ "$#" -gt 2 ]; then
    printf "${RED}Too many arguments${NC}\n"
    exit 1
fi

case "$1" in
    -g)
        generate_key "$2"
        ;;
    -n)
        generate_random_key "$2"
        ;;
    -k)
        generate_otp "$2"
        ;;
    *)
        printf "${BLUE}Possible options are:   -n : Generate a new key 64 hex characters\n"
        printf "                        -g : Encrypt the key\n"
        printf "                        -k : Generate a new temporary key${NC}\n"
        ;;
esac
