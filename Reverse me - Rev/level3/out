<nice>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xe22(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<try>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xe07(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<but>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xdeb(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<this>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xdcf(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<it>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xdb4(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<not>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xd97(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<that>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xd7c(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<easy>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xd62(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<___syscall_malloc>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xd48(%rip)
    call   puts@plt
    mov    $0x1,%edi
    call   exit@plt
    nopw   0x0(%rax,%rax,1)

<____syscall_malloc>:
    push   %rbp
    mov    %rsp,%rbp
    mov    %rdi,0xd2e(%rip)
    call   puts@plt
    pop    %rbp
    ret
    cs nopw 0x0(%rax,%rax,1)
    nopl   0x0(%rax)

<main>:
    push   %rbp
    mov    %rsp,%rbp
    sub    $0x60,%rsp
    movl   $0x0,-0x4(%rbp)
    mov    %rdi,0xd0d(%rip)
    mov    $0x0,%al
    call   printf@plt
    lea    -0x40(%rbp),%rsi
    mov    %rdi,0xd0e(%rip)
    mov    $0x0,%al
    call   __isoc99_scanf@plt
    mov    %eax,-0x8(%rbp)
    mov    $0x1,%eax
    cmp    -0x8(%rbp),%eax
    je     <main+0x45>
    call   <___syscall_malloc>
    movsbl -0x3f(%rbp),%ecx
    mov    $0x32,%eax
    cmp    %ecx,%eax
    je     <main+0x5b>
    call   <___syscall_malloc>
    movsbl -0x40(%rbp),%ecx
    mov    $0x34,%eax
    cmp    %ecx,%eax
    je     <main+0x71>
    call   <___syscall_malloc>
    mov    0x2c48(%rip),%rax
    mov    (%rax),%rdi
    call   fflush@plt
    lea    -0x21(%rbp),%rdi
    xor    %esi,%esi
    mov    $0x9,%edx
    call   memset@plt
    movb   $0x2a,-0x21(%rbp)
    movb   $0x0,-0x41(%rbp)
    movq   $0x2,-0x18(%rbp)
    movl   $0x1,-0xc(%rbp)
    lea    -0x21(%rbp),%rdi
    call   strlen@plt
    mov    %rax,%rcx
    xor    %eax,%eax
    cmp    $0x8,%rcx
    mov    %al,-0x45(%rbp)
    jae    <main+0xe3>
    mov    -0x18(%rbp),%rax
    mov    %rax,-0x50(%rbp)
    lea    -0x40(%rbp),%rdi
    call   strlen@plt
    mov    %rax,%rcx
    mov    -0x50(%rbp),%rax
    cmp    %rcx,%rax
    setb   %al
    mov    %al,-0x45(%rbp)
    mov    -0x45(%rbp),%al
    test   $0x1,%al
    jne    <main+0xf3>
    jmp    <main+0x141>
    mov    -0x18(%rbp),%rax
    mov    -0x40(%rbp,%rax,1),%al
    mov    %al,-0x44(%rbp)
    mov    -0x18(%rbp),%rax
    mov    -0x3f(%rbp,%rax,1),%al
    mov    %al,-0x43(%rbp)
    mov    -0x18(%rbp),%rax
    mov    -0x3e(%rbp,%rax,1),%al
    mov    %al,-0x42(%rbp)
    lea    -0x44(%rbp),%rdi
    call   atoi@plt
    mov    %al,%cl
    movslq -0xc(%rbp),%rax
    mov    %cl,-0x21(%rbp,%rax,1)
    mov    -0x18(%rbp),%rax
    add    $0x3,%rax
    mov    %rax,-0x18(%rbp)
    mov    -0xc(%rbp),%eax
    add    $0x1,%eax
    mov    %eax,-0xc(%rbp)
    jmp    <main+0xa7>
    movslq -0xc(%rbp),%rax
    movb   $0x0,-0x21(%rbp,%rax,1)
    mov    %rsi,0xb93(%rip)
    lea    -0x21(%rbp),%rdi
    call   strcmp@plt
    mov    %eax,-0x10(%rbp)
    mov    -0x10(%rbp),%eax
    mov    %eax,-0x54(%rbp)
    sub    $0xfffffffe,%eax
    je     <main+0x216>
    jmp    <main+0x171>
    mov    -0x54(%rbp),%eax
    sub    $0xffffffff,%eax
    je     <main+0x20c>
    jmp    <main+0x182>
    mov    -0x54(%rbp),%eax
    test   %eax,%eax
    je     <main+0x23e>
    jmp    <main+0x192>
    mov    -0x54(%rbp),%eax
    sub    $0x1,%eax
    je     <main+0x1f8>
    jmp    <main+0x1a3>
    mov    -0x54(%rbp),%eax
    sub    $0x2,%eax
    je     <main+0x202>
    jmp    <main+0x1b4>
    mov    -0x54(%rbp),%eax
    sub    $0x3,%eax
    je     <main+0x220>
    jmp    <main+0x1c5>
    mov    -0x54(%rbp),%eax
    sub    $0x4,%eax
    je     <main+0x22a>
    jmp    <main+0x1d6>
    mov    -0x54(%rbp),%eax
    sub    $0x5,%eax
    je     <main+0x234>
    jmp    <main+0x1e7>
    mov    -0x54(%rbp),%eax
    sub    $0x73,%eax
    je     <main+0x248>
    jmp    <main+0x252>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <____syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    jmp    <main+0x257>
    call   <___syscall_malloc>
    xor    %eax,%eax
    add    $0x60,%rsp
    pop    %rbp
    ret

_fini:
    endbr64
    sub    $0x8,%rsp
    add    $0x8,%rsp
    ret
